service: medical-serverless-backend
frameworkVersion: '2'

plugins:
  - serverless-offline  

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: prod
  region: us-east-1
  environment:
    BUILD_NUMBER: 6
    USER_TABLE: ${self:service}-${self:provider.name}-Users-${self:provider.environment.BUILD_NUMBER}
    JWT_SECRET: ${self:custom.secrets.jwtSecret}

  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:GetItem
      Resource: !Sub "arn:aws:dynamodb:${opt:region, self:provider.region}:${AWS::AccountId}:table/${self:provider.environment.USER_TABLE}"

custom:
  secrets: ${file(jwt_secret.json)}
  stage: ${opt:stage, self:provider.stage}
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent


functions:
  login:
    handler: login.handler
    description: POST/login          
    events:
      - http:
          path: login
          method: post
          request:
            schema:
              application/json: ${file(request_validator_login.json)}
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  register:
    handler: register.handler
    description: POST/register          
    events:
      - http:
          path: register
          method: post
          request:
            schema:
              application/json: ${file(request_validator_register.json)}
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  getUser:
    handler: getUser.handler
    description: GET /user
    events:
      - http:
          path: user
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  forgotPassword:
    handler: forgotPassword.handler
    description: PUT /forgot_pasword
    events:
      - http:
          path: forgot_password/{email_id}
          method: put
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}

  updateUser:
    handler: updateUser.handler
    description: POST /updateUser
    events:
      - http:
          path: updateUser
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:  
          - AttributeName: email_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: user_name
            AttributeType: S
          - AttributeName: phone_num
            AttributeType: S  
           
        KeySchema:
          - AttributeName: user_name
            KeyType: HASH
          - AttributeName: email_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        LocalSecondaryIndexes:
          - IndexName: lsi_user
            KeySchema:
              - AttributeName: user_name
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes: 
          - IndexName: gsi_user
            KeySchema:
              - AttributeName: email_id
                KeyType: HASH
              - AttributeName: phone_num
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1 
        

